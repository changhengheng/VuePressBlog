(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{672:function(v,_,t){"use strict";t.r(_);var l=t(21),e=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("这个概念同样出自曲凯老师的课程。")]),v._v(" "),t("p",[v._v("问题树又叫逻辑树、演绎树，常见的一个实例就是思维导图。和假设驱动一样，问题树也是用来拆解问题的工具。")]),v._v(" "),t("p",[v._v("将复杂问题拆解成简单问题的过程中，问题树的结构主要就是为了让你在想问题的时候有一条线，你可以跟着它走，而不是漫无目的地去找答案。")]),v._v(" "),t("p",[v._v("这么做有两个好处： 一个是你会更容易找到问题所在；另一个是你可以根据拆解，把树上的问题都变成任务，清晰、没有遗漏地分配给其他人。")]),v._v(" "),t("p",[v._v("那么，面对一个复杂问题，该怎么搭建它的问题树结构呢？一共可以总结成五个小步骤：")]),v._v(" "),t("ul",[t("li",[v._v("第一，你要找出问题中存在的核心问题和起始问题。这点特别重要，之后的每一步都是基于这一点；")]),v._v(" "),t("li",[v._v("第二，要确定导致核心问题和起始问题的主要原因；")]),v._v(" "),t("li",[v._v("第三，要确定核心问题和起始问题导致的主要后果。第二点讲的是原因，现在是后果；")]),v._v(" "),t("li",[v._v("第四，根据以上的因果关系画出这个问题树；")]),v._v(" "),t("li",[v._v("第五，反复审查问题树。看看哪里还缺东西，进行最后的补充和修改。")])]),v._v(" "),t("p",[v._v("实际解决问题的时候，假设驱动和搭建问题树可以同时使用。")])])}),[],!1,null,null,null);_.default=e.exports}}]);